scope resolution operator- ::

Typecasting
34- int(34),float(34) ot (float)34

const int a = 34;

setw is width assigner(zfill)
suchas 004 -- __4

array
int marks[] ={23,45,56,89};
or
int marks[1];
marks[0]=23;

by printing array we get the address of the same;

//struct
shortcut for struct employee is ep now:-
typedef struct employee
{
    /* data */
} ep;

function prototype
int sum(int,int)
telling the prog to wait for function

simply swapping wont swap we have to swap by pointer
void swappointer(int *a,int *b)  {
    int temp = *a;
    *a = *b;
    *b = *a;
}

simply if u dont wanna copy and have two variable point at same location:
a = 8
&b =a

use inline before functions:
not when recursion and static variable


static c = 0--- for one use only;

friend declaring in class:
friend Complex sumcomplex(Complex o1, Complex o2)


// Derived Class syntax
/*
class {{derived-class-name}} : {{visibility-mode}} {{base-class-name}}
{
    class members/methods/etc...
}
Note:
1. Default visibility mode is private
2. Public Visibility Mode: Public members of the base class becomes Public members of the derived class
3. Private Visibility Mode: Public members of the base class becomes Private members of the derived class
4. Private members are never inherited
*/

classname *ptr = new classname

function overloading:
functions with same name and different arguments and different works
